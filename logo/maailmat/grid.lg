;;; primitives for moving in a 2d world

;; grids

to newgrid :xdim :ydim [:xscale 16] [:yscale 16] [:xoff 0] [:yoff 0]
  op `[[[,:xdim ,:ydim] [,:xscale ,:yscale] [,:xoff ,:yoff]]
       ,[(mdarray (list :xdim :ydim) 0)]]
end

to grid.memvars :grid
  localmake "memvars first :grid
  localmake "dims first :memvars
  localmake "scales first bf :memvars
  localmake "offsets last :memvars
  make "xdim first :dims
  make "ydim last :dims
  make "xscale first :scales
  make "yscale last :scales
  make "xoff first :offsets
  make "yoff last :offsets
end

to coord.unpack :coord
  make "x first :coord
  make "y last :coord
end

to grid.cell :grid :coord
  local [xdim ydim xscale yscale xoff yoff x y]
  grid.memvars :grid
  coord.unpack :coord
  op list int (:x - :xoff) / :xscale int (:y - :yoff) / :yscale
end

to grid.pos :grid :coord
  local [xdim ydim xscale yscale xoff yoff x y]
  grid.memvars :grid
  coord.unpack :coord
  op list :x * :xscale + :xoff :y * :yscale + :yoff
end

to grid.at :grid :coord
  local [x y xdim ydim]
  coord.unpack :coord
  make "xdim first first first :grid
  make "ydim last first first :grid
  if (or :x < 0 :y < 0 :x >= :xdim :y >= :ydim) [op []]
  op mditem :coord last :grid
end

to grid.atpos :grid :coord
  op grid.at :grid grid.cell :grid :coord
end

to grid.set :grid :coord :block
  local [x y xdim ydim]
  coord.unpack :coord
  make "xdim first first first :grid
  make "ydim last first first :grid
  if (or :x < 0 :y < 0 :x >= :xdim :y >= :ydim) [stop]
  mdsetitem :coord last :grid :block
end

to grid.blit :grid :x :y :stuff
  if emptyp :stuff [stop]
  localmake "row first :stuff
  repeat count :row [
    grid.set :grid (list :x + repcount :y) item repcount :row
  ]
  grid.blit :grid :x :y + 1 bf :stuff
end

;; drawing

to grid.draw :grid
  local [xdim ydim xscale yscale xoff yoff]
  grid.memvars :grid
  localmake "oldpos pos
  ht
  repeat :ydim [
   localmake "y repcount - 1
   repeat :xdim [
    localmake "x repcount - 1
    pu setxy :x * :xscale + :xoff :y * :yscale + :yoff pd
    localmake "block (mditem (list :x :y) last :grid)
    if not emptyp :block [run :block]
  ]]
  pu setpos :oldpos pd
end

;; collisions

to transpose :coord
  op list last :coord first :coord
end

to offset :coord :x :y
  op list (first :coord) + :x (last :coord) + :y
end

to seqbetween :min :max :step
  if :min > :max [op []]
  op fput :min seqbetween :min + :step :max :step
end

to grid.xcollisions :off :scale :pos1 :pos2
  if (first :pos2) < (first :pos1) ~
     [op grid.xcollisions :off :scale :pos2 :pos1]
  localmake "firstx ((int ((first :pos1) - :off) / :scale) + 1)
  make "firstx :firstx * :scale + :off
  localmake "xs seqbetween :firstx first :pos2 :scale
  localmake "xd (first :pos2) - (first :pos1)
  if :xd = 0 [op []]
  localmake "yd (last :pos2) - (last :pos1)
  localmake "tilt :yd / :xd
  op map [list ? (? - (first :pos1)) * :tilt + (last :pos1)] :xs
end

to grid.ycollisions :off :scale :pos1 :pos2
  localmake "res grid.xcollisions :off :scale transpose :pos1 transpose :pos2
  op map "transpose :res
end

to grid.blocksat :grid :coord :dir
  local [x y]
  coord.unpack :coord
  localmake "cs ifelse :dir = "x ~
     [list grid.cell :grid list :x - .01 :y grid.cell :grid list :x + .01 :y] ~
     [list grid.cell :grid list :x :y - .01 grid.cell :grid list :x :y + .01]
  op map [fput grid.at :grid ? ?] :cs
end

to grid.collisions :grid :pos1 :pos2
  local [xdim ydim xscale yscale xoff yoff]
  grid.memvars :grid
  localmake "posx grid.xcollisions :xoff :xscale :pos1 :pos2
  localmake "posy grid.ycollisions :yoff :yscale :pos1 :pos2
  localmake "collx map [list ? grid.blocksat :grid ? "x] :posx
  localmake "colly map [list ? grid.blocksat :grid ? "y] :posy
  op se :collx :colly
end

to grid.transitions :grid :pos1 :pos2
  op filter [not (first first last ?) = (first last last ?)] ~
     grid.collisions :grid :pos1 :pos2
end

