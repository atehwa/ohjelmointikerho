maailma "grid

;; the world

to world.fixscale :scale :row
  op map [ifelse ? = "_ [[]] [list ? :scale]] :row
end

to world.initialise :filename
  localmake "worlddata filecontents :filename
  localmake "params first :worlddata
  localmake "scale first :params
  localmake "dims bf :params
  localmake "map bf :worlddata
  make "world (newgrid first :dims last :dims :scale :scale
     (first :dims) * :scale / -2 (last :dims) * :scale / -2)
  grid.blit :world 0 0 map [world.fixscale :scale ?] :map
  showturtle
end

;; finding hit tiles from a world

to grid.closestto :pos :coll
  if emptyp :coll [op []]
  if emptyp bf :coll [op first :coll]
  localmake "res grid.closestto :pos bf :coll
  if (distance2 :pos first :res) < (distance2 :pos first first :coll) [op :res]
  op first :coll
end

to grid.firsthit :grid :pos1 :pos2
  op grid.closestto :pos1 grid.transitions :grid :pos1 :pos2
end

;; moving with checked collisions

Make ".lastpos []

to checkcollisions
  if not emptyp :.lastpos [makecollisions :world :.lastpos pos]
  make ".lastpos pos
end

to makecollisions :grid :src :dst
  localmake "firsthit grid.firsthit :grid :src :dst
  if emptyp :firsthit [stop]
  foreach last :firsthit [if not emptyp first ? 
    [apply word first first ? ".collide fput first :firsthit bf ?]]
end

to move.protected :.move
  make ".lastpos pos
  run :.move
  checkcollisions
end

to mene :pit
  move.protected [fd :pit]
end

to kaiku :pit
  op grid.atpos :world where [fd :pit]
end

to luotaa :pit
  sano kaiku :pit
end

;; tile types

to putuum :pos :msg
  pr :msg
  jumppos :pos
  ht
  repeat 50 [fd repcount rt 173]
end

to sq :size
  repeat 4 [fd :size rt 90]
end

to sq.collide :pos :x :y
  putuum :pos [Osuit seinään]
end

to tile :size
  pystyyn :size / 2
  vaakaan :size / 2
  pystyyn :size / 2
  pystyyn :size / -2
  vaakaan :size / 2
  pystyyn :size / -2
  vaakaan 0 - :size
end

to tile.collide :pos :x :y
  putuum :pos [Osuit tiileen]
end

to goal :size
  sq :size
  if :size < 10 [stop]
  fd :size / 2
  rt 45
  goal :size / 1.41421356
end

to maaliko :juttu
  anna sekä [eiettä tyhjäkö :juttu] [samatko eka :juttu "goal]
end

to goal.collide :pos :x :y
  sano [Jee, voitit!]
  repeat 12 [rt 30 repeat 36 [fd 4 rt 10]]
end

to tree :size
  vaakaan :size
  vaakaan :size / -2
  pystyyn :size / 3
  repeat 2 [lt 30 sq :size / 3]
end

to tree.collide :pos :x :y
  putuum :pos [Osuit puuhun]
end

;; initialisation

to uudestaan
  cs grid.draw :world st
  fence
end

to taso :maa
  world.initialise (word "ralli/ :maa ".wld)
  uudestaan
end

taso "esim

