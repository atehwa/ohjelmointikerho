maailma "grid

;; the world

;world.initialise "ralli/esim.wld

;; finding hit tiles from a world

to grid.closestto :pos :coll
  if emptyp :coll [op []]
  if emptyp bf :coll [op first :coll]
  localmake "res grid.closestto :pos bf :coll
  if (distance2 :pos first :res) < (distance2 :pos first first :coll) [op :res]
  op first :coll
end

to grid.firsthit :grid :pos1 :pos2
  op grid.closestto :pos1 grid.transitions :grid :pos1 :pos2
end

;; moving with checked collisions

Make ".lastpos []

to checkcollisions
  if not emptyp :.lastpos [makecollisions :world :.lastpos pos]
  make ".lastpos pos
end

to makecollisions :grid :src :dst
  localmake "firsthit grid.firsthit :grid :src :dst
  if emptyp :firsthit [stop]
  foreach last :firsthit [if not emptyp first ? 
    [apply word first ? ".collide fput first :firsthit bf ?]]
end

to move.protected :.move
  make ".lastpos pos
  run :.move
  checkcollisions
end

to liiku :pit
  move.protected [et :pit]
end

to redefine.command :cmd :defn
  make "redefp "true
  localmake "origcmd word :cmd ".original
  copydef :origcmd :cmd
  define :cmd invoke :defn :origcmd
  bury :cmd
  make "redefp "false
end

to moveprotect.command :cmd
  redefine.command :cmd ~
     [`[[arg1] [move.protected [apply ,[word "" ?] (list :arg1)]]]]
end

to moveprotect2.command :cmd
  redefine.command :cmd ~
     [`[[arg1 arg2] [move.protected [apply ,[word "" ?] (list :arg1 :arg2)]]]]
end

;foreach [fd forward et eteen bk back ta taakse setpos paikkaan setx sety] ~
;   "moveprotect.command
;foreach [setxy meexy] "moveprotect2.command

;; tile types

to sq :size
  repeat 4 [fd :size rt 90]
end

to tile :size
  fd :size / 2
  rt 90
  fd :size
  lt 90
  fd :size / 2
  lt 90
  fd :size * 2 / 3
  lt 90
  fd :size / 2
  lt 90
  fd :size / 3
  rt 90
  fd :size / 2
  rt 90
  fd :size * 2 / 3
  rt 90
end

